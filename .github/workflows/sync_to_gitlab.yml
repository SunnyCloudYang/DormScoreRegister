name: Sync to Tsinghua Git
on:
  push:
    branches: [main]
    paths-ignore:
      - .github/workflows/sync_to_gitlab.yml
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sync_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Push to Tsinghua Git
        env:
          TSINGHUA_TOKEN: ${{ secrets.TSINGHUA_GIT_TOKEN }}
        run: |
          git remote add tsinghua "https://oauth2:${TSINGHUA_TOKEN}@git.tsinghua.edu.cn/yunyang-21/DormScoreRegister.git"
          git push tsinghua HEAD:main --tags --force

  sync_release:
    runs-on: ubuntu-latest
    needs: sync_code
    if: github.event_name == 'release'
    steps:
      - name: Get Release Info
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -sH "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})

          # Capture the description for later use
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$(echo "$RESPONSE" | jq -r '.body')" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Capture the assets as a serialized string (name:url)
          ASSETS_JSON=$(echo "$RESPONSE" | jq -r '.assets | map("\(.name)=\(.browser_download_url)") | join(",")')

          echo "assets=$ASSETS_JSON" >> $GITHUB_OUTPUT

      - name: Create GitLab Release
        env:
          GITLAB_TOKEN: ${{ secrets.TSINGHUA_GIT_TOKEN }}
        run: |
          # Extract asset details from the release output
          ASSETS_JSON="${{ steps.release.outputs.assets }}"

          # Create the release with or without assets
          if [ "$ASSETS_JSON" == "null" ] || [ "$ASSETS_JSON" == "" ]; then
            # Create release with description only
            curl --request POST \
              -H "Content-Type: application/json" \
              --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
              --data "name=${{ github.ref_name }}" \
              --data "tag_name=${{ github.ref_name }}" \
              --data "description=${{ steps.release.outputs.description }}" \
              "https://git.tsinghua.edu.cn/api/v4/projects/27745/releases"
          else
            # If assets are available, include them in the release
            # Split the assets string into an array of 'name:url' pairs
            IFS=',' read -r -a assets_array <<< "$ASSETS_JSON"

            # Prepare the CURL command
            CURL_CMD="curl --request POST \
              -H \"Content-Type: application/json\" \
              --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\""
            
            json_data=$(
              printf '%s\n' "${assets_array[@]}" \
              | jq -R -n '
                {"name": "${{ github.ref_name }}", "tag_name": "${{ github.ref_name }}", "description": "${{ steps.release.outputs.description }}", "assets": { "links": [inputs | split("=") | { "name": .[0], "url": .[1] }] } }
              '
            )

            CURL_CMD="$CURL_CMD --data '$json_data'"

            # Execute the final CURL command
            CURL_CMD="$CURL_CMD \"https://git.tsinghua.edu.cn/api/v4/projects/27745/releases\""
            echo $CURL_CMD
            eval $CURL_CMD
          fi
