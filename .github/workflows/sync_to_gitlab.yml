name: Sync to Tsinghua Git
on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  sync_code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Remove Workflows
        run: |
          rm -rf .github/workflows

      - name: Push to Tsinghua Git
        env:
          TSINGHUA_TOKEN: ${{ secrets.TSINGHUA_GIT_TOKEN }}
        run: |
          git remote add tsinghua "https://oauth2:${TSINGHUA_TOKEN}@git.tsinghua.edu.cn/yunyang-21/DormScoreRegister.git"
          git push tsinghua HEAD:main --tags --force

  sync_release:
    runs-on: ubuntu-latest
    needs: sync_code
    if: github.event_name == 'release'
    steps:
      - name: Get Release Info
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -sH "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }})
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$(echo "$RESPONSE" | jq -r '.body')" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "assets=$(echo "$RESPONSE" | jq -r '.assets')" >> $GITHUB_ENV

      - name: Create GitLab Release
        env:
          GITLAB_TOKEN: ${{ secrets.TSINGHUA_GIT_TOKEN }}
        run: |
          # Extract asset details from the release output
          ASSETS_JSON="${{ env.assets }}"
          
          # Create the release with description only if no assets are available
          if [ "$ASSETS_JSON" == "null" ] || [ "$ASSETS_JSON" == "" ]; then
            curl --request POST \
              --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
              --data "name=${{ github.ref_name }}" \
              --data "tag_name=${{ github.ref_name }}" \
              --data "description=${{ steps.release.outputs.description }}" \
              "https://git.tsinghua.edu.cn/api/v4/projects/27745/releases"
          else
            # If assets are available, include them in the release
            ASSET_NAME_0=$(echo $ASSETS_JSON | jq -r '.[0].name // empty')
            ASSET_URL_0=$(echo $ASSETS_JSON | jq -r '.[0].browser_download_url // empty')
            
            CURL_CMD="curl --request POST \
              --header \"PRIVATE-TOKEN: $GITLAB_TOKEN\" \
              --data \"name=${{ github.ref_name }}\" \
              --data \"tag_name=${{ github.ref_name }}\" \
              --data \"description=${{ steps.release.outputs.description }}\""
            
            if [ ! -z "$ASSET_NAME_0" ] && [ ! -z "$ASSET_URL_0" ]; then
              CURL_CMD="$CURL_CMD \
              --data \"assets.links[0].name=$ASSET_NAME_0\" \
              --data \"assets.links[0].url=$ASSET_URL_0\""
              
              # Check for a second asset
              ASSET_NAME_1=$(echo $ASSETS_JSON | jq -r '.[1].name // empty')
              ASSET_URL_1=$(echo $ASSETS_JSON | jq -r '.[1].browser_download_url // empty')
              if [ ! -z "$ASSET_NAME_1" ] && [ ! -z "$ASSET_URL_1" ]; then
                CURL_CMD="$CURL_CMD \
                --data \"assets.links[1].name=$ASSET_NAME_1\" \
                --data \"assets.links[1].url=$ASSET_URL_1\""
              fi
            fi
            
            CURL_CMD="$CURL_CMD \"https://git.tsinghua.edu.cn/api/v4/projects/27745/releases\""
            eval $CURL_CMD
          fi

